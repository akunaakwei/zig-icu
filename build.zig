const std = @import("std");

pub fn build(b: *std.Build) void {
    const target = b.standardTargetOptions(.{});
    const native_target = b.resolveTargetQuery(.{});
    const optimize = b.standardOptimizeOption(.{});

    const icu_dep = b.dependency("icu", .{});
    const common_flags = .{
        "-fno-exceptions",
        "-DWIN32_LEAN_AND_MEAN",
        "-DNOCRYPT",
    };

    const native_stubuc = b.addStaticLibrary(.{
        .name = "native_icustubuc",
        .target = native_target,
        .optimize = optimize,
    });
    native_stubuc.linkLibCpp();

    native_stubuc.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })));

    native_stubuc.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })),
        .files = &.{
            "appendable.cpp",
            "bmpset.cpp",
            "brkeng.cpp",
            "brkiter.cpp",
            "bytesinkutil.cpp",
            "bytestream.cpp",
            "bytestrie.cpp",
            "bytestriebuilder.cpp",
            "bytestrieiterator.cpp",
            "caniter.cpp",
            "characterproperties.cpp",
            "chariter.cpp",
            "charstr.cpp",
            "cmemory.cpp",
            "cstr.cpp",
            "cstring.cpp",
            "cwchar.cpp",
            "dictbe.cpp",
            "dictionarydata.cpp",
            "dtintrv.cpp",
            "edits.cpp",
            "emojiprops.cpp",
            "errorcode.cpp",
            "filteredbrk.cpp",
            "filterednormalizer2.cpp",
            "icudataver.cpp",
            "icuplug.cpp",
            "loadednormalizer2impl.cpp",
            "localebuilder.cpp",
            "localematcher.cpp",
            "localeprioritylist.cpp",
            "locavailable.cpp",
            "locbased.cpp",
            "locdispnames.cpp",
            "locdistance.cpp",
            "locdspnm.cpp",
            "locid.cpp",
            "loclikely.cpp",
            "loclikelysubtags.cpp",
            "locmap.cpp",
            "locresdata.cpp",
            "locutil.cpp",
            "lsr.cpp",
            "lstmbe.cpp",
            "messagepattern.cpp",
            "mlbe.cpp",
            "normalizer2.cpp",
            "normalizer2impl.cpp",
            "normlzr.cpp",
            "parsepos.cpp",
            "patternprops.cpp",
            "pluralmap.cpp",
            "propname.cpp",
            "propsvec.cpp",
            "punycode.cpp",
            "putil.cpp",
            "rbbi.cpp",
            "rbbi_cache.cpp",
            "rbbidata.cpp",
            "rbbinode.cpp",
            "rbbirb.cpp",
            "rbbiscan.cpp",
            "rbbisetb.cpp",
            "rbbistbl.cpp",
            "rbbitblb.cpp",
            "resbund.cpp",
            "resbund_cnv.cpp",
            "resource.cpp",
            "restrace.cpp",
            "ruleiter.cpp",
            "schriter.cpp",
            "serv.cpp",
            "servlk.cpp",
            "servlkf.cpp",
            "servls.cpp",
            "servnotf.cpp",
            "servrbf.cpp",
            "servslkf.cpp",
            "sharedobject.cpp",
            "simpleformatter.cpp",
            "static_unicode_sets.cpp",
            "stringpiece.cpp",
            "stringtriebuilder.cpp",
            "uarrsort.cpp",
            "ubidi.cpp",
            "ubidi_props.cpp",
            "ubidiln.cpp",
            "ubiditransform.cpp",
            "ubidiwrt.cpp",
            "ubrk.cpp",
            "ucase.cpp",
            "ucasemap.cpp",
            "ucasemap_titlecase_brkiter.cpp",
            "ucat.cpp",
            "uchar.cpp",
            "ucharstrie.cpp",
            "ucharstriebuilder.cpp",
            "ucharstrieiterator.cpp",
            "uchriter.cpp",
            "ucln_cmn.cpp",
            "ucmndata.cpp",
            "ucnv.cpp",
            "ucnv2022.cpp",
            "ucnv_bld.cpp",
            "ucnv_cb.cpp",
            "ucnv_cnv.cpp",
            "ucnv_ct.cpp",
            "ucnv_err.cpp",
            "ucnv_ext.cpp",
            "ucnv_io.cpp",
            "ucnv_lmb.cpp",
            "ucnv_set.cpp",
            "ucnv_u16.cpp",
            "ucnv_u32.cpp",
            "ucnv_u7.cpp",
            "ucnv_u8.cpp",
            "ucnvbocu.cpp",
            "ucnvdisp.cpp",
            "ucnvhz.cpp",
            "ucnvisci.cpp",
            "ucnvlat1.cpp",
            "ucnvmbcs.cpp",
            "ucnvscsu.cpp",
            "ucnvsel.cpp",
            "ucol_swp.cpp",
            "ucptrie.cpp",
            "ucurr.cpp",
            "udata.cpp",
            "udatamem.cpp",
            "udataswp.cpp",
            "uenum.cpp",
            "uhash.cpp",
            "uhash_us.cpp",
            "uidna.cpp",
            "uinit.cpp",
            "uinvchar.cpp",
            "uiter.cpp",
            "ulist.cpp",
            "uloc.cpp",
            "uloc_keytype.cpp",
            "uloc_tag.cpp",
            "ulocale.cpp",
            "ulocbuilder.cpp",
            "umapfile.cpp",
            "umath.cpp",
            "umutablecptrie.cpp",
            "umutex.cpp",
            "unames.cpp",
            "unifiedcache.cpp",
            "unifilt.cpp",
            "unifunct.cpp",
            "uniset.cpp",
            "uniset_closure.cpp",
            "uniset_props.cpp",
            "unisetspan.cpp",
            "unistr.cpp",
            "unistr_case.cpp",
            "unistr_case_locale.cpp",
            "unistr_cnv.cpp",
            "unistr_props.cpp",
            "unistr_titlecase_brkiter.cpp",
            "unorm.cpp",
            "unormcmp.cpp",
            "uobject.cpp",
            "uprops.cpp",
            "ures_cnv.cpp",
            "uresbund.cpp",
            "uresdata.cpp",
            "usc_impl.cpp",
            "uscript.cpp",
            "uscript_props.cpp",
            "uset.cpp",
            "uset_props.cpp",
            "usetiter.cpp",
            "ushape.cpp",
            "usprep.cpp",
            "ustack.cpp",
            "ustr_cnv.cpp",
            "ustr_titlecase_brkiter.cpp",
            "ustr_wcs.cpp",
            "ustrcase.cpp",
            "ustrcase_locale.cpp",
            "ustrenum.cpp",
            "ustrfmt.cpp",
            "ustring.cpp",
            "ustrtrns.cpp",
            "utext.cpp",
            "utf_impl.cpp",
            "util.cpp",
            "util_props.cpp",
            "utrace.cpp",
            "utrie.cpp",
            "utrie2.cpp",
            "utrie2_builder.cpp",
            "utrie_swap.cpp",
            "uts46.cpp",
            "utypes.cpp",
            "uvector.cpp",
            "uvectr32.cpp",
            "uvectr64.cpp",
            "wintz.cpp",
        },
        .flags = &(common_flags ++ .{"-DU_COMMON_IMPLEMENTATION"}),
    });
    native_stubuc.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "stubdata" })),
        .files = &.{"stubdata.cpp"},
        .flags = &common_flags,
    });

    const stubuc = b.addStaticLibrary(.{
        .name = "icustubuc",
        .target = native_target,
        .optimize = optimize,
    });
    stubuc.linkLibCpp();

    stubuc.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })));

    stubuc.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })),
        .files = &.{
            "appendable.cpp",
            "bmpset.cpp",
            "brkeng.cpp",
            "brkiter.cpp",
            "bytesinkutil.cpp",
            "bytestream.cpp",
            "bytestrie.cpp",
            "bytestriebuilder.cpp",
            "bytestrieiterator.cpp",
            "caniter.cpp",
            "characterproperties.cpp",
            "chariter.cpp",
            "charstr.cpp",
            "cmemory.cpp",
            "cstr.cpp",
            "cstring.cpp",
            "cwchar.cpp",
            "dictbe.cpp",
            "dictionarydata.cpp",
            "dtintrv.cpp",
            "edits.cpp",
            "emojiprops.cpp",
            "errorcode.cpp",
            "filteredbrk.cpp",
            "filterednormalizer2.cpp",
            "icudataver.cpp",
            "icuplug.cpp",
            "loadednormalizer2impl.cpp",
            "localebuilder.cpp",
            "localematcher.cpp",
            "localeprioritylist.cpp",
            "locavailable.cpp",
            "locbased.cpp",
            "locdispnames.cpp",
            "locdistance.cpp",
            "locdspnm.cpp",
            "locid.cpp",
            "loclikely.cpp",
            "loclikelysubtags.cpp",
            "locmap.cpp",
            "locresdata.cpp",
            "locutil.cpp",
            "lsr.cpp",
            "lstmbe.cpp",
            "messagepattern.cpp",
            "mlbe.cpp",
            "normalizer2.cpp",
            "normalizer2impl.cpp",
            "normlzr.cpp",
            "parsepos.cpp",
            "patternprops.cpp",
            "pluralmap.cpp",
            "propname.cpp",
            "propsvec.cpp",
            "punycode.cpp",
            "putil.cpp",
            "rbbi.cpp",
            "rbbi_cache.cpp",
            "rbbidata.cpp",
            "rbbinode.cpp",
            "rbbirb.cpp",
            "rbbiscan.cpp",
            "rbbisetb.cpp",
            "rbbistbl.cpp",
            "rbbitblb.cpp",
            "resbund.cpp",
            "resbund_cnv.cpp",
            "resource.cpp",
            "restrace.cpp",
            "ruleiter.cpp",
            "schriter.cpp",
            "serv.cpp",
            "servlk.cpp",
            "servlkf.cpp",
            "servls.cpp",
            "servnotf.cpp",
            "servrbf.cpp",
            "servslkf.cpp",
            "sharedobject.cpp",
            "simpleformatter.cpp",
            "static_unicode_sets.cpp",
            "stringpiece.cpp",
            "stringtriebuilder.cpp",
            "uarrsort.cpp",
            "ubidi.cpp",
            "ubidi_props.cpp",
            "ubidiln.cpp",
            "ubiditransform.cpp",
            "ubidiwrt.cpp",
            "ubrk.cpp",
            "ucase.cpp",
            "ucasemap.cpp",
            "ucasemap_titlecase_brkiter.cpp",
            "ucat.cpp",
            "uchar.cpp",
            "ucharstrie.cpp",
            "ucharstriebuilder.cpp",
            "ucharstrieiterator.cpp",
            "uchriter.cpp",
            "ucln_cmn.cpp",
            "ucmndata.cpp",
            "ucnv.cpp",
            "ucnv2022.cpp",
            "ucnv_bld.cpp",
            "ucnv_cb.cpp",
            "ucnv_cnv.cpp",
            "ucnv_ct.cpp",
            "ucnv_err.cpp",
            "ucnv_ext.cpp",
            "ucnv_io.cpp",
            "ucnv_lmb.cpp",
            "ucnv_set.cpp",
            "ucnv_u16.cpp",
            "ucnv_u32.cpp",
            "ucnv_u7.cpp",
            "ucnv_u8.cpp",
            "ucnvbocu.cpp",
            "ucnvdisp.cpp",
            "ucnvhz.cpp",
            "ucnvisci.cpp",
            "ucnvlat1.cpp",
            "ucnvmbcs.cpp",
            "ucnvscsu.cpp",
            "ucnvsel.cpp",
            "ucol_swp.cpp",
            "ucptrie.cpp",
            "ucurr.cpp",
            "udata.cpp",
            "udatamem.cpp",
            "udataswp.cpp",
            "uenum.cpp",
            "uhash.cpp",
            "uhash_us.cpp",
            "uidna.cpp",
            "uinit.cpp",
            "uinvchar.cpp",
            "uiter.cpp",
            "ulist.cpp",
            "uloc.cpp",
            "uloc_keytype.cpp",
            "uloc_tag.cpp",
            "ulocale.cpp",
            "ulocbuilder.cpp",
            "umapfile.cpp",
            "umath.cpp",
            "umutablecptrie.cpp",
            "umutex.cpp",
            "unames.cpp",
            "unifiedcache.cpp",
            "unifilt.cpp",
            "unifunct.cpp",
            "uniset.cpp",
            "uniset_closure.cpp",
            "uniset_props.cpp",
            "unisetspan.cpp",
            "unistr.cpp",
            "unistr_case.cpp",
            "unistr_case_locale.cpp",
            "unistr_cnv.cpp",
            "unistr_props.cpp",
            "unistr_titlecase_brkiter.cpp",
            "unorm.cpp",
            "unormcmp.cpp",
            "uobject.cpp",
            "uprops.cpp",
            "ures_cnv.cpp",
            "uresbund.cpp",
            "uresdata.cpp",
            "usc_impl.cpp",
            "uscript.cpp",
            "uscript_props.cpp",
            "uset.cpp",
            "uset_props.cpp",
            "usetiter.cpp",
            "ushape.cpp",
            "usprep.cpp",
            "ustack.cpp",
            "ustr_cnv.cpp",
            "ustr_titlecase_brkiter.cpp",
            "ustr_wcs.cpp",
            "ustrcase.cpp",
            "ustrcase_locale.cpp",
            "ustrenum.cpp",
            "ustrfmt.cpp",
            "ustring.cpp",
            "ustrtrns.cpp",
            "utext.cpp",
            "utf_impl.cpp",
            "util.cpp",
            "util_props.cpp",
            "utrace.cpp",
            "utrie.cpp",
            "utrie2.cpp",
            "utrie2_builder.cpp",
            "utrie_swap.cpp",
            "uts46.cpp",
            "utypes.cpp",
            "uvector.cpp",
            "uvectr32.cpp",
            "uvectr64.cpp",
            "wintz.cpp",
        },
        .flags = &(common_flags ++ .{"-DU_COMMON_IMPLEMENTATION"}),
    });
    stubuc.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "stubdata" })),
        .files = &.{"stubdata.cpp"},
        .flags = &common_flags,
    });

    const native_i18n = b.addStaticLibrary(.{
        .name = "native_icui18n",
        .target = native_target,
        .optimize = optimize,
    });
    native_i18n.linkLibCpp();

    native_i18n.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })));
    native_i18n.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "i18n" })));

    native_i18n.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "i18n" })),
        .files = &.{
            "alphaindex.cpp",
            "anytrans.cpp",
            "astro.cpp",
            "basictz.cpp",
            "bocsu.cpp",
            "brktrans.cpp",
            "buddhcal.cpp",
            "calendar.cpp",
            "casetrn.cpp",
            "cecal.cpp",
            "chnsecal.cpp",
            "choicfmt.cpp",
            "coleitr.cpp",
            "coll.cpp",
            "collation.cpp",
            "collationbuilder.cpp",
            "collationcompare.cpp",
            "collationdata.cpp",
            "collationdatabuilder.cpp",
            "collationdatareader.cpp",
            "collationdatawriter.cpp",
            "collationfastlatin.cpp",
            "collationfastlatinbuilder.cpp",
            "collationfcd.cpp",
            "collationiterator.cpp",
            "collationkeys.cpp",
            "collationroot.cpp",
            "collationrootelements.cpp",
            "collationruleparser.cpp",
            "collationsets.cpp",
            "collationsettings.cpp",
            "collationtailoring.cpp",
            "collationweights.cpp",
            "compactdecimalformat.cpp",
            "coptccal.cpp",
            "cpdtrans.cpp",
            "csdetect.cpp",
            "csmatch.cpp",
            "csr2022.cpp",
            "csrecog.cpp",
            "csrmbcs.cpp",
            "csrsbcs.cpp",
            "csrucode.cpp",
            "csrutf8.cpp",
            "curramt.cpp",
            "currfmt.cpp",
            "currpinf.cpp",
            "currunit.cpp",
            "dangical.cpp",
            "datefmt.cpp",
            "dayperiodrules.cpp",
            "dcfmtsym.cpp",
            "decContext.cpp",
            "decNumber.cpp",
            "decimfmt.cpp",
            "displayoptions.cpp",
            "double-conversion-bignum-dtoa.cpp",
            "double-conversion-bignum.cpp",
            "double-conversion-cached-powers.cpp",
            "double-conversion-double-to-string.cpp",
            "double-conversion-fast-dtoa.cpp",
            "double-conversion-string-to-double.cpp",
            "double-conversion-strtod.cpp",
            "dtfmtsym.cpp",
            "dtitvfmt.cpp",
            "dtitvinf.cpp",
            "dtptngen.cpp",
            "dtrule.cpp",
            "erarules.cpp",
            "esctrn.cpp",
            "ethpccal.cpp",
            "fmtable.cpp",
            "fmtable_cnv.cpp",
            "format.cpp",
            "formatted_string_builder.cpp",
            "formattedval_iterimpl.cpp",
            "formattedval_sbimpl.cpp",
            "formattedvalue.cpp",
            "fphdlimp.cpp",
            "fpositer.cpp",
            "funcrepl.cpp",
            "gender.cpp",
            "gregocal.cpp",
            "gregoimp.cpp",
            "hebrwcal.cpp",
            "indiancal.cpp",
            "inputext.cpp",
            "islamcal.cpp",
            "iso8601cal.cpp",
            "japancal.cpp",
            "listformatter.cpp",
            "measfmt.cpp",
            "measunit.cpp",
            "measunit_extra.cpp",
            "measure.cpp",
            "msgfmt.cpp",
            "messageformat2.cpp",
            "messageformat2_arguments.cpp",
            "messageformat2_checker.cpp",
            "messageformat2_data_model.cpp",
            "messageformat2_errors.cpp",
            "messageformat2_evaluation.cpp",
            "messageformat2_formatter.cpp",
            "messageformat2_formattable.cpp",
            "messageformat2_function_registry.cpp",
            "messageformat2_parser.cpp",
            "messageformat2_serializer.cpp",
            "name2uni.cpp",
            "nfrs.cpp",
            "nfrule.cpp",
            "nfsubs.cpp",
            "nortrans.cpp",
            "nultrans.cpp",
            "number_affixutils.cpp",
            "number_asformat.cpp",
            "number_capi.cpp",
            "number_compact.cpp",
            "number_currencysymbols.cpp",
            "number_decimalquantity.cpp",
            "number_decimfmtprops.cpp",
            "number_fluent.cpp",
            "number_formatimpl.cpp",
            "number_grouping.cpp",
            "number_integerwidth.cpp",
            "number_longnames.cpp",
            "number_mapper.cpp",
            "number_modifiers.cpp",
            "number_multiplier.cpp",
            "number_notation.cpp",
            "number_output.cpp",
            "number_padding.cpp",
            "number_patternmodifier.cpp",
            "number_patternstring.cpp",
            "number_rounding.cpp",
            "number_scientific.cpp",
            "number_simple.cpp",
            "number_skeletons.cpp",
            "number_symbolswrapper.cpp",
            "number_usageprefs.cpp",
            "number_utils.cpp",
            "numfmt.cpp",
            "numparse_affixes.cpp",
            "numparse_compositions.cpp",
            "numparse_currency.cpp",
            "numparse_decimal.cpp",
            "numparse_impl.cpp",
            "numparse_parsednumber.cpp",
            "numparse_scientific.cpp",
            "numparse_symbols.cpp",
            "numparse_validators.cpp",
            "numrange_capi.cpp",
            "numrange_fluent.cpp",
            "numrange_impl.cpp",
            "numsys.cpp",
            "olsontz.cpp",
            "persncal.cpp",
            "pluralranges.cpp",
            "plurfmt.cpp",
            "plurrule.cpp",
            "quant.cpp",
            "quantityformatter.cpp",
            "rbnf.cpp",
            "rbt.cpp",
            "rbt_data.cpp",
            "rbt_pars.cpp",
            "rbt_rule.cpp",
            "rbt_set.cpp",
            "rbtz.cpp",
            "regexcmp.cpp",
            "regeximp.cpp",
            "regexst.cpp",
            "regextxt.cpp",
            "region.cpp",
            "reldatefmt.cpp",
            "reldtfmt.cpp",
            "rematch.cpp",
            "remtrans.cpp",
            "repattrn.cpp",
            "rulebasedcollator.cpp",
            "scientificnumberformatter.cpp",
            "scriptset.cpp",
            "search.cpp",
            "selfmt.cpp",
            "sharedbreakiterator.cpp",
            "simpletz.cpp",
            "smpdtfmt.cpp",
            "smpdtfst.cpp",
            "sortkey.cpp",
            "standardplural.cpp",
            "string_segment.cpp",
            "strmatch.cpp",
            "strrepl.cpp",
            "stsearch.cpp",
            "taiwncal.cpp",
            "timezone.cpp",
            "titletrn.cpp",
            "tmunit.cpp",
            "tmutamt.cpp",
            "tmutfmt.cpp",
            "tolowtrn.cpp",
            "toupptrn.cpp",
            "translit.cpp",
            "transreg.cpp",
            "tridpars.cpp",
            "tzfmt.cpp",
            "tzgnames.cpp",
            "tznames.cpp",
            "tznames_impl.cpp",
            "tzrule.cpp",
            "tztrans.cpp",
            "ucal.cpp",
            "ucln_in.cpp",
            "ucol.cpp",
            "ucol_res.cpp",
            "ucol_sit.cpp",
            "ucoleitr.cpp",
            "ucsdet.cpp",
            "udat.cpp",
            "udateintervalformat.cpp",
            "udatpg.cpp",
            "ufieldpositer.cpp",
            "uitercollationiterator.cpp",
            "ulistformatter.cpp",
            "ulocdata.cpp",
            "umsg.cpp",
            "unesctrn.cpp",
            "uni2name.cpp",
            "units_data.cpp",
            "units_complexconverter.cpp",
            "units_converter.cpp",
            "units_router.cpp",
            "unum.cpp",
            "unumsys.cpp",
            "upluralrules.cpp",
            "uregex.cpp",
            "uregexc.cpp",
            "uregion.cpp",
            "usearch.cpp",
            "uspoof.cpp",
            "uspoof_build.cpp",
            "uspoof_conf.cpp",
            "uspoof_impl.cpp",
            "utf16collationiterator.cpp",
            "utf8collationiterator.cpp",
            "utmscale.cpp",
            "utrans.cpp",
            "vtzone.cpp",
            "vzone.cpp",
            "windtfmt.cpp",
            "winnmfmt.cpp",
            "wintzimpl.cpp",
            "zonemeta.cpp",
            "zrule.cpp",
            "ztrans.cpp",
        },
        .flags = &(common_flags ++ .{"-DU_I18N_IMPLEMENTATION"}),
    });

    const i18n = b.addStaticLibrary(.{
        .name = "icui18n",
        .target = target,
        .optimize = optimize,
    });
    i18n.linkLibCpp();

    i18n.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })));
    i18n.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "i18n" })));

    i18n.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "i18n" })),
        .files = &.{
            "alphaindex.cpp",
            "anytrans.cpp",
            "astro.cpp",
            "basictz.cpp",
            "bocsu.cpp",
            "brktrans.cpp",
            "buddhcal.cpp",
            "calendar.cpp",
            "casetrn.cpp",
            "cecal.cpp",
            "chnsecal.cpp",
            "choicfmt.cpp",
            "coleitr.cpp",
            "coll.cpp",
            "collation.cpp",
            "collationbuilder.cpp",
            "collationcompare.cpp",
            "collationdata.cpp",
            "collationdatabuilder.cpp",
            "collationdatareader.cpp",
            "collationdatawriter.cpp",
            "collationfastlatin.cpp",
            "collationfastlatinbuilder.cpp",
            "collationfcd.cpp",
            "collationiterator.cpp",
            "collationkeys.cpp",
            "collationroot.cpp",
            "collationrootelements.cpp",
            "collationruleparser.cpp",
            "collationsets.cpp",
            "collationsettings.cpp",
            "collationtailoring.cpp",
            "collationweights.cpp",
            "compactdecimalformat.cpp",
            "coptccal.cpp",
            "cpdtrans.cpp",
            "csdetect.cpp",
            "csmatch.cpp",
            "csr2022.cpp",
            "csrecog.cpp",
            "csrmbcs.cpp",
            "csrsbcs.cpp",
            "csrucode.cpp",
            "csrutf8.cpp",
            "curramt.cpp",
            "currfmt.cpp",
            "currpinf.cpp",
            "currunit.cpp",
            "dangical.cpp",
            "datefmt.cpp",
            "dayperiodrules.cpp",
            "dcfmtsym.cpp",
            "decContext.cpp",
            "decNumber.cpp",
            "decimfmt.cpp",
            "displayoptions.cpp",
            "double-conversion-bignum-dtoa.cpp",
            "double-conversion-bignum.cpp",
            "double-conversion-cached-powers.cpp",
            "double-conversion-double-to-string.cpp",
            "double-conversion-fast-dtoa.cpp",
            "double-conversion-string-to-double.cpp",
            "double-conversion-strtod.cpp",
            "dtfmtsym.cpp",
            "dtitvfmt.cpp",
            "dtitvinf.cpp",
            "dtptngen.cpp",
            "dtrule.cpp",
            "erarules.cpp",
            "esctrn.cpp",
            "ethpccal.cpp",
            "fmtable.cpp",
            "fmtable_cnv.cpp",
            "format.cpp",
            "formatted_string_builder.cpp",
            "formattedval_iterimpl.cpp",
            "formattedval_sbimpl.cpp",
            "formattedvalue.cpp",
            "fphdlimp.cpp",
            "fpositer.cpp",
            "funcrepl.cpp",
            "gender.cpp",
            "gregocal.cpp",
            "gregoimp.cpp",
            "hebrwcal.cpp",
            "indiancal.cpp",
            "inputext.cpp",
            "islamcal.cpp",
            "iso8601cal.cpp",
            "japancal.cpp",
            "listformatter.cpp",
            "measfmt.cpp",
            "measunit.cpp",
            "measunit_extra.cpp",
            "measure.cpp",
            "msgfmt.cpp",
            "messageformat2.cpp",
            "messageformat2_arguments.cpp",
            "messageformat2_checker.cpp",
            "messageformat2_data_model.cpp",
            "messageformat2_errors.cpp",
            "messageformat2_evaluation.cpp",
            "messageformat2_formatter.cpp",
            "messageformat2_formattable.cpp",
            "messageformat2_function_registry.cpp",
            "messageformat2_parser.cpp",
            "messageformat2_serializer.cpp",
            "name2uni.cpp",
            "nfrs.cpp",
            "nfrule.cpp",
            "nfsubs.cpp",
            "nortrans.cpp",
            "nultrans.cpp",
            "number_affixutils.cpp",
            "number_asformat.cpp",
            "number_capi.cpp",
            "number_compact.cpp",
            "number_currencysymbols.cpp",
            "number_decimalquantity.cpp",
            "number_decimfmtprops.cpp",
            "number_fluent.cpp",
            "number_formatimpl.cpp",
            "number_grouping.cpp",
            "number_integerwidth.cpp",
            "number_longnames.cpp",
            "number_mapper.cpp",
            "number_modifiers.cpp",
            "number_multiplier.cpp",
            "number_notation.cpp",
            "number_output.cpp",
            "number_padding.cpp",
            "number_patternmodifier.cpp",
            "number_patternstring.cpp",
            "number_rounding.cpp",
            "number_scientific.cpp",
            "number_simple.cpp",
            "number_skeletons.cpp",
            "number_symbolswrapper.cpp",
            "number_usageprefs.cpp",
            "number_utils.cpp",
            "numfmt.cpp",
            "numparse_affixes.cpp",
            "numparse_compositions.cpp",
            "numparse_currency.cpp",
            "numparse_decimal.cpp",
            "numparse_impl.cpp",
            "numparse_parsednumber.cpp",
            "numparse_scientific.cpp",
            "numparse_symbols.cpp",
            "numparse_validators.cpp",
            "numrange_capi.cpp",
            "numrange_fluent.cpp",
            "numrange_impl.cpp",
            "numsys.cpp",
            "olsontz.cpp",
            "persncal.cpp",
            "pluralranges.cpp",
            "plurfmt.cpp",
            "plurrule.cpp",
            "quant.cpp",
            "quantityformatter.cpp",
            "rbnf.cpp",
            "rbt.cpp",
            "rbt_data.cpp",
            "rbt_pars.cpp",
            "rbt_rule.cpp",
            "rbt_set.cpp",
            "rbtz.cpp",
            "regexcmp.cpp",
            "regeximp.cpp",
            "regexst.cpp",
            "regextxt.cpp",
            "region.cpp",
            "reldatefmt.cpp",
            "reldtfmt.cpp",
            "rematch.cpp",
            "remtrans.cpp",
            "repattrn.cpp",
            "rulebasedcollator.cpp",
            "scientificnumberformatter.cpp",
            "scriptset.cpp",
            "search.cpp",
            "selfmt.cpp",
            "sharedbreakiterator.cpp",
            "simpletz.cpp",
            "smpdtfmt.cpp",
            "smpdtfst.cpp",
            "sortkey.cpp",
            "standardplural.cpp",
            "string_segment.cpp",
            "strmatch.cpp",
            "strrepl.cpp",
            "stsearch.cpp",
            "taiwncal.cpp",
            "timezone.cpp",
            "titletrn.cpp",
            "tmunit.cpp",
            "tmutamt.cpp",
            "tmutfmt.cpp",
            "tolowtrn.cpp",
            "toupptrn.cpp",
            "translit.cpp",
            "transreg.cpp",
            "tridpars.cpp",
            "tzfmt.cpp",
            "tzgnames.cpp",
            "tznames.cpp",
            "tznames_impl.cpp",
            "tzrule.cpp",
            "tztrans.cpp",
            "ucal.cpp",
            "ucln_in.cpp",
            "ucol.cpp",
            "ucol_res.cpp",
            "ucol_sit.cpp",
            "ucoleitr.cpp",
            "ucsdet.cpp",
            "udat.cpp",
            "udateintervalformat.cpp",
            "udatpg.cpp",
            "ufieldpositer.cpp",
            "uitercollationiterator.cpp",
            "ulistformatter.cpp",
            "ulocdata.cpp",
            "umsg.cpp",
            "unesctrn.cpp",
            "uni2name.cpp",
            "units_data.cpp",
            "units_complexconverter.cpp",
            "units_converter.cpp",
            "units_router.cpp",
            "unum.cpp",
            "unumsys.cpp",
            "upluralrules.cpp",
            "uregex.cpp",
            "uregexc.cpp",
            "uregion.cpp",
            "usearch.cpp",
            "uspoof.cpp",
            "uspoof_build.cpp",
            "uspoof_conf.cpp",
            "uspoof_impl.cpp",
            "utf16collationiterator.cpp",
            "utf8collationiterator.cpp",
            "utmscale.cpp",
            "utrans.cpp",
            "vtzone.cpp",
            "vzone.cpp",
            "windtfmt.cpp",
            "winnmfmt.cpp",
            "wintzimpl.cpp",
            "zonemeta.cpp",
            "zrule.cpp",
            "ztrans.cpp",
        },
        .flags = &(common_flags ++ .{"-DU_I18N_IMPLEMENTATION"}),
    });

    i18n.installHeadersDirectory(
        icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "i18n", "unicode" })),
        "unicode",
        .{},
    );
    b.installArtifact(i18n);

    const native_ut = b.addStaticLibrary(.{
        .name = "native_icuut",
        .target = native_target,
        .optimize = optimize,
    });
    native_ut.linkLibCpp();
    native_ut.linkLibrary(native_stubuc);
    native_ut.linkLibrary(native_i18n);

    native_ut.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "tools", "toolutil" })));
    native_ut.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })));
    native_ut.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "i18n" })));

    native_ut.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "tools", "toolutil" })),
        .files = &.{
            "collationinfo.cpp",
            "dbgutil.cpp",
            "denseranges.cpp",
            "filestrm.cpp",
            "filetools.cpp",
            "flagparser.cpp",
            "package.cpp",
            "pkg_genc.cpp",
            "pkg_gencmn.cpp",
            "pkg_icu.cpp",
            "pkgitems.cpp",
            "ppucd.cpp",
            "swapimpl.cpp",
            "toolutil.cpp",
            "ucbuf.cpp",
            "ucln_tu.cpp",
            "ucm.cpp",
            "ucmstate.cpp",
            "udbgutil.cpp",
            "unewdata.cpp",
            "uoptions.cpp",
            "uparse.cpp",
            "writesrc.cpp",
            "xmlparser.cpp",
        },
        .flags = &(common_flags ++ .{"-DU_TOOLUTIL_IMPLEMENTATION"}),
    });

    const ut = b.addStaticLibrary(.{
        .name = "icuut",
        .target = target,
        .optimize = optimize,
    });
    ut.linkLibCpp();
    ut.linkLibrary(stubuc);
    ut.linkLibrary(i18n);

    ut.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "tools", "toolutil" })));
    ut.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })));
    ut.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "i18n" })));

    ut.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "tools", "toolutil" })),
        .files = &.{
            "collationinfo.cpp",
            "dbgutil.cpp",
            "denseranges.cpp",
            "filestrm.cpp",
            "filetools.cpp",
            "flagparser.cpp",
            "package.cpp",
            "pkg_genc.cpp",
            "pkg_gencmn.cpp",
            "pkg_icu.cpp",
            "pkgitems.cpp",
            "ppucd.cpp",
            "swapimpl.cpp",
            "toolutil.cpp",
            "ucbuf.cpp",
            "ucln_tu.cpp",
            "ucm.cpp",
            "ucmstate.cpp",
            "udbgutil.cpp",
            "unewdata.cpp",
            "uoptions.cpp",
            "uparse.cpp",
            "writesrc.cpp",
            "xmlparser.cpp",
        },
        .flags = &(common_flags ++ .{"-DU_TOOLUTIL_IMPLEMENTATION"}),
    });

    b.installArtifact(ut);

    const data_char = switch (target.result.cpu.arch.endian()) {
        .big => "b",
        .little => "l",
    };
    const maybe_data_dep = switch (target.result.cpu.arch.endian()) {
        .big => b.lazyDependency("icudtb", .{}),
        .little => b.lazyDependency("icudtl", .{}),
    };
    const data_name = b.fmt("icudt77{s}.dat", .{data_char});

    const genccode = b.addExecutable(.{
        .name = "genccode",
        .target = native_target,
        .optimize = optimize,
    });
    genccode.linkLibCpp();
    genccode.linkLibrary(native_ut);

    genccode.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "tools", "toolutil" })));
    genccode.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })));
    genccode.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "i18n" })));

    genccode.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "tools", "genccode" })),
        .files = &.{"genccode.c"},
        .flags = &common_flags,
    });

    const uc = b.addStaticLibrary(.{
        .name = "icuuc",
        .target = target,
        .optimize = optimize,
    });
    uc.linkLibCpp();

    uc.addIncludePath(icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })));

    uc.addCSourceFiles(.{
        .root = icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common" })),
        .files = &.{
            "appendable.cpp",
            "bmpset.cpp",
            "brkeng.cpp",
            "brkiter.cpp",
            "bytesinkutil.cpp",
            "bytestream.cpp",
            "bytestrie.cpp",
            "bytestriebuilder.cpp",
            "bytestrieiterator.cpp",
            "caniter.cpp",
            "characterproperties.cpp",
            "chariter.cpp",
            "charstr.cpp",
            "cmemory.cpp",
            "cstr.cpp",
            "cstring.cpp",
            "cwchar.cpp",
            "dictbe.cpp",
            "dictionarydata.cpp",
            "dtintrv.cpp",
            "edits.cpp",
            "emojiprops.cpp",
            "errorcode.cpp",
            "filteredbrk.cpp",
            "filterednormalizer2.cpp",
            "icudataver.cpp",
            "icuplug.cpp",
            "loadednormalizer2impl.cpp",
            "localebuilder.cpp",
            "localematcher.cpp",
            "localeprioritylist.cpp",
            "locavailable.cpp",
            "locbased.cpp",
            "locdispnames.cpp",
            "locdistance.cpp",
            "locdspnm.cpp",
            "locid.cpp",
            "loclikely.cpp",
            "loclikelysubtags.cpp",
            "locmap.cpp",
            "locresdata.cpp",
            "locutil.cpp",
            "lsr.cpp",
            "lstmbe.cpp",
            "messagepattern.cpp",
            "mlbe.cpp",
            "normalizer2.cpp",
            "normalizer2impl.cpp",
            "normlzr.cpp",
            "parsepos.cpp",
            "patternprops.cpp",
            "pluralmap.cpp",
            "propname.cpp",
            "propsvec.cpp",
            "punycode.cpp",
            "putil.cpp",
            "rbbi.cpp",
            "rbbi_cache.cpp",
            "rbbidata.cpp",
            "rbbinode.cpp",
            "rbbirb.cpp",
            "rbbiscan.cpp",
            "rbbisetb.cpp",
            "rbbistbl.cpp",
            "rbbitblb.cpp",
            "resbund.cpp",
            "resbund_cnv.cpp",
            "resource.cpp",
            "restrace.cpp",
            "ruleiter.cpp",
            "schriter.cpp",
            "serv.cpp",
            "servlk.cpp",
            "servlkf.cpp",
            "servls.cpp",
            "servnotf.cpp",
            "servrbf.cpp",
            "servslkf.cpp",
            "sharedobject.cpp",
            "simpleformatter.cpp",
            "static_unicode_sets.cpp",
            "stringpiece.cpp",
            "stringtriebuilder.cpp",
            "uarrsort.cpp",
            "ubidi.cpp",
            "ubidi_props.cpp",
            "ubidiln.cpp",
            "ubiditransform.cpp",
            "ubidiwrt.cpp",
            "ubrk.cpp",
            "ucase.cpp",
            "ucasemap.cpp",
            "ucasemap_titlecase_brkiter.cpp",
            "ucat.cpp",
            "uchar.cpp",
            "ucharstrie.cpp",
            "ucharstriebuilder.cpp",
            "ucharstrieiterator.cpp",
            "uchriter.cpp",
            "ucln_cmn.cpp",
            "ucmndata.cpp",
            "ucnv.cpp",
            "ucnv2022.cpp",
            "ucnv_bld.cpp",
            "ucnv_cb.cpp",
            "ucnv_cnv.cpp",
            "ucnv_ct.cpp",
            "ucnv_err.cpp",
            "ucnv_ext.cpp",
            "ucnv_io.cpp",
            "ucnv_lmb.cpp",
            "ucnv_set.cpp",
            "ucnv_u16.cpp",
            "ucnv_u32.cpp",
            "ucnv_u7.cpp",
            "ucnv_u8.cpp",
            "ucnvbocu.cpp",
            "ucnvdisp.cpp",
            "ucnvhz.cpp",
            "ucnvisci.cpp",
            "ucnvlat1.cpp",
            "ucnvmbcs.cpp",
            "ucnvscsu.cpp",
            "ucnvsel.cpp",
            "ucol_swp.cpp",
            "ucptrie.cpp",
            "ucurr.cpp",
            "udata.cpp",
            "udatamem.cpp",
            "udataswp.cpp",
            "uenum.cpp",
            "uhash.cpp",
            "uhash_us.cpp",
            "uidna.cpp",
            "uinit.cpp",
            "uinvchar.cpp",
            "uiter.cpp",
            "ulist.cpp",
            "uloc.cpp",
            "uloc_keytype.cpp",
            "uloc_tag.cpp",
            "ulocale.cpp",
            "ulocbuilder.cpp",
            "umapfile.cpp",
            "umath.cpp",
            "umutablecptrie.cpp",
            "umutex.cpp",
            "unames.cpp",
            "unifiedcache.cpp",
            "unifilt.cpp",
            "unifunct.cpp",
            "uniset.cpp",
            "uniset_closure.cpp",
            "uniset_props.cpp",
            "unisetspan.cpp",
            "unistr.cpp",
            "unistr_case.cpp",
            "unistr_case_locale.cpp",
            "unistr_cnv.cpp",
            "unistr_props.cpp",
            "unistr_titlecase_brkiter.cpp",
            "unorm.cpp",
            "unormcmp.cpp",
            "uobject.cpp",
            "uprops.cpp",
            "ures_cnv.cpp",
            "uresbund.cpp",
            "uresdata.cpp",
            "usc_impl.cpp",
            "uscript.cpp",
            "uscript_props.cpp",
            "uset.cpp",
            "uset_props.cpp",
            "usetiter.cpp",
            "ushape.cpp",
            "usprep.cpp",
            "ustack.cpp",
            "ustr_cnv.cpp",
            "ustr_titlecase_brkiter.cpp",
            "ustr_wcs.cpp",
            "ustrcase.cpp",
            "ustrcase_locale.cpp",
            "ustrenum.cpp",
            "ustrfmt.cpp",
            "ustring.cpp",
            "ustrtrns.cpp",
            "utext.cpp",
            "utf_impl.cpp",
            "util.cpp",
            "util_props.cpp",
            "utrace.cpp",
            "utrie.cpp",
            "utrie2.cpp",
            "utrie2_builder.cpp",
            "utrie_swap.cpp",
            "uts46.cpp",
            "utypes.cpp",
            "uvector.cpp",
            "uvectr32.cpp",
            "uvectr64.cpp",
            "wintz.cpp",
        },
        .flags = &(common_flags ++ .{"-DU_COMMON_IMPLEMENTATION"}),
    });

    if (maybe_data_dep) |data_dep| {
        const genccode_run = b.addRunArtifact(genccode);
        // genccode_run.has_side_effects = true;
        genccode_run.addFileArg(data_dep.path(data_name));
        genccode_run.addArg("--destdir");
        const genccode_dest = genccode_run.addOutputDirectoryArg("genccode");
        genccode_run.addArg("--entrypoint");
        genccode_run.addArg("icudt77");

        uc.addCSourceFiles(.{
            .root = genccode_dest,
            .files = &.{b.fmt("icudt77{s}_dat.c", .{data_char})},
            .flags = &common_flags,
        });
    }

    uc.installHeadersDirectory(
        icu_dep.path(b.pathJoin(&.{ "icu4c", "source", "common", "unicode" })),
        "unicode",
        .{},
    );
    b.installArtifact(uc);
}
